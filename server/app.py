################################################################################
# app.py
# Rebecca Wilson and McIntosh Webber
# Last Modified April 14, 2022
#
# ABOUT
# This program hosts a local server that (1) allows the user to create mp3 files
# that can then be downloaded by the AAC board and (2) graphs the data (button
# presses) generated by use of the AAC board.
#
# REQUIRED FILES
# (01) personal.py -> contains sensitive information (aio_username and aio_key)
# (02) main.html located in templates
# (03) form.html located in templates
# (04) bar_chart.html located in templates
# (05) style.css located in static (for main.html)
# (06) formStyle.css located in static (for form.html)
# (07) graphStyle.css located in static (for bar_chart.html)
# (08) NovaIMG05.jpg located in static
# (12) NovaVID02.mp4 located in static
#
# REFERENCES
# [01] https://projects.raspberrypi.org/en/projects/python-web-server-with-flask/2
# [02] https://www.geeksforgeeks.org/retrieving-html-from-data-using-flask/
# [03] https://www.codegrepper.com/code-examples/python/input+box+for+text+in+flask
# [04] https://www.w3schools.com/python/python_file_write.asp
# [05] https://www.w3schools.com/python/python_file_open.asp
# [06] https://www.geeksforgeeks.org/convert-text-speech-python/
# [07] https://ordinarycoders.com/blog/article/11-chart-js-examples#installation
# [08] https://blog.ruanbekker.com/blog/2017/12/14/graphing-pretty-charts-with-python-flask-and-chartjs/
# [09] https://sashamaps.net/docs/resources/20-colors/
# [10] https://www.chartjs.org/docs/latest/charts/bar.html
# [11] https://www.programiz.com/python-programming/methods/list/count
# [12] https://adafruit-io-python-client.readthedocs.io/en/latest/data.html
# [13] https://www.w3schools.com/css/css_align.asp
# [14] https://kanchanardj.medium.com/how-to-add-images-to-html-in-a-flask-app-4dbcc92e3aeb
# [15] https://kanchanardj.medium.com/redirecting-to-another-page-with-button-click-in-python-flask-c112a2a2304c
# [16] https://www.geeksforgeeks.org/get-current-date-using-python/
# [17] https://www.w3schools.com/html/tryit.asp?filename=tryhtml5_video
# [18] https://www.developerdrive.com/responsive-image-gallery-flexbox/
# [19] https://thispointer.com/convert-utc-datetime-string-to-local-time-in-python/
# [20] https://gitlab.com/-/snippets/1924163
# [21] https://www.geeksforgeeks.org/bar-plot-in-matplotlib/
# [22] https://stackoverflow.com/questions/50728328/python-how-to-show-matplotlib-in-flask
# [23] https://www.tutorialspoint.com/how-to-show-matplotlib-in-flask
# [24] https://stackoverflow.com/questions/40575067/matplotlib-bar-chart-space-out-bars
# [25] https://stackoverflow.com/questions/23357798/how-to-draw-grid-lines-behind-matplotlib-bar-graph
# [26] https://python-graph-gallery.com/3-control-color-of-barplots
# [27] https://matplotlib.org/3.1.0/tutorials/colors/colors.html
# [28] https://rgbacolorpicker.com/rgba-to-hex
# [29] https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.grid.html
# [30] https://stackoverflow.com/questions/1982770/matplotlib-changing-the-color-of-an-axis
# [31] https://matplotlib.org/3.5.0/api/spines_api.html
#
# NOTES
# (1) The references were used to create this file as well as all required files.
# (2) Before running, change the UPLOAD_FOLDER location in this file and the
#     aio_username and aio_key in the personal.py file.
#
################################################################################

# import libraries
import os
from flask import Flask, render_template, flash, request, redirect, url_for, send_from_directory, Markup
from werkzeug.utils import secure_filename
from gtts import gTTS
from Adafruit_IO import Client
from datetime import date, datetime, tzinfo
from dateutil import tz
import pytz
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
import base64
import io

# constants
NUMBER_OF_BUTTONS = 12
UPLOAD_FOLDER = '/Users/wilson/Desktop/combinedServer'

# create Flask instance
app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# import sensitive data from personal file
try:
    from personal import personalData
except ImportError:
    print("WiFi and io secrets are kept in personal.py, please add them there.")
    raise

# username and key from persona.py to login to adafruit io
aio_username = personalData["aio_username"]
aio_key = personalData["aio_key"]

# login and open adafruit io
aio = Client(aio_username, aio_key)

# get data from adafruit io feed
data = aio.data("aac-for-dogs")

# make parallel lists of adafruit io feed values (recordedData) and times (recordedTime)
recordedData = []
recordedTime = []
recordedData.clear()
recordedTime.clear()
for i in range(len(data)):
    recordedData.append(data[i].value.lower().rstrip("\n"))
    # the dates arrive as UTC this converts them to local time for use in graph
    dateTime = data[i].created_at[0:10] + ' ' + data[i].created_at[11:19]
    format = "%Y-%m-%d %H:%M:%S"
    # create datetime object
    dt_utc = datetime.strptime(dateTime, format)
    dt_utc = dt_utc.replace(tzinfo=pytz.UTC)
    # get local timezone
    local_zone = tz.tzlocal()
    # convert UTC to local timezone
    dateTimeLocal = dt_utc.astimezone(local_zone)
    dateTimeLocalString = dateTimeLocal.strftime(format)
    # save date to list   
    recordedTime.append(dateTimeLocalString[0:10])  

# create a new list of data with only current day's data
today = date.today()
currentData = []
currentData.clear()
for i in range(len(recordedData)):
    if (recordedTime[i] == str(today)):
        currentData.append(recordedData[i])

# make list of labels for graph based on words.txt file created when board is setup
labels = []
labels.clear()
file = open("words.txt", 'r')
for word in file:
    labels.append(word.lower().rstrip("\n"))
file.close()

# use labels to count the number of times a word is pressed (these are the values for the graph)
values = []
currentValues = []
values.clear()
currentValues.clear()
for word in labels:
    values.append(recordedData.count(word))
    currentValues.append(currentData.count(word))

# render main.html as the "home page" for the server website
@app.route('/main', methods =['GET', 'POST'])
def main():
    return render_template('main.html')

# render form.html page where the user submits words for the buttons
@app.route('/setboard')
def setBoard():
    return render_template("form.html")

# get words from form.html and use them to create the mp3 files and text file
# return user to main page when words are submitted
@app.route('/setboard', methods = ['POST'])
def setBoard_Post():
    file = open("words.txt", "w")
    file.close()
    for i in range(NUMBER_OF_BUTTONS):
        word = request.form['button{}'.format(i)]
        file = open("words.txt", "a")
        file.write("{}\n".format(word))
        soundFile = gTTS(text = word, lang = 'en', slow = False)
        soundFile.save("{}.mp3".format(i))
    file.close()
    return render_template('main.html')

# allow feather to download mp3 and txt files
@app.route('/uploads/<name>')
def download_file(name):
    return send_from_directory(app.config["UPLOAD_FOLDER"], name)
#set

# render bar_chart.html page that shows the number of button presses
@app.route('/graph')
def graph():
    # colors
    barColors = ["#e6194b33", "#f5823033", "#ffe11933", "#d2f53c33", "#3cb44b33", "#00808033", "#46f0f033", "#0082c833", "#00008033", "#911eb433", "#f032e633", "#80808033"]
    barEdgeColors = ['#e6194b', "#f58230", "#ffe119", "#d2f53c", "#3cb44b", "#008080", "#46f0f0", "#0082c8", "#000080", "#911eb4", "#f032e6", "#808080"]
    
    # generate total buttons pressed plot
    totalFig = Figure(figsize = (12, 6))
    axis = totalFig.add_subplot(1, 1, 1)
    axis.set_title("Total Button Presses")
    axis.set_xlabel("word")
    axis.set_ylabel("number of presses")
    axis.grid(axis = "y", zorder = 0, color = "#80808003", linewidth = 0.2)
    axis.bar(labels, values, zorder = 3, color = barColors, edgecolor = barEdgeColors)
    axis.spines[['top', 'right', 'left', 'bottom']].set_color("#80808080")

    # convert total buttons pressed plot to png image
    pngImageTotal = io.BytesIO()
    FigureCanvas(totalFig).print_png(pngImageTotal)

    # generate today's button presses plot
    dailyFig = Figure(figsize = (12, 6))
    axis = dailyFig.add_subplot(1, 1, 1)
    axis.set_title("Today's Button Presses")
    axis.set_xlabel("word")
    axis.set_ylabel("number of presses")
    axis.grid(axis = "y", zorder = 0, color = "#80808003", linewidth = 0.2)
    axis.bar(labels, currentValues, zorder = 3, color = barColors, edgecolor = barEdgeColors)
    axis.spines[['top', 'right', 'left', 'bottom']].set_color("#80808080")
    
    # convert daily button's pressed plot to png image
    pngImageDaily = io.BytesIO()
    FigureCanvas(dailyFig).print_png(pngImageDaily)

    # encode PNG images to base64 string
    pngTotalDataImg64 = "data:image/png;base64,"
    pngTotalDataImg64 += base64.b64encode(pngImageTotal.getvalue()).decode('utf8')
    pngDailyDataImg64 = "data:image/png;base64,"
    pngDailyDataImg64 += base64.b64encode(pngImageDaily.getvalue()).decode('utf8')
    
    return render_template("bar_chart.html", image = [pngTotalDataImg64, pngDailyDataImg64])

# host local server
if __name__ == '__main__':
    app.run(debug = True, host = '0.0.0.0', port = 8000)
